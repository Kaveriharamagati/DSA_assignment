#include <stdio.h>

#include <stdlib.h>

#define MAX_VERTICES 100

// Structure to represent a node in the adjacency list

typedef struct Node {

int dest;

struct Node* next;
} Node;

// Structure to represent the adjacency list

typedef struct Graph {

int numVertices;

Node** adjLists;
} Graph;

// Function to create a new node

Node* createNode(int dest) {

Node* newNode = (Node*)malloc(sizeof(Node));

newNode->dest = dest;

newNode->next = NULL;

return newNode;
}

// Function to create a graph with a given number of vertices

Graph* createGraph(int numVertices) {

Graph* graph = (Graph*)malloc(sizeof(Graph));

graph->numVertices = numVertices;



// Create an array of adjacency lists

graph->adjLists = (Node**)malloc(numVertices * sizeof(Node*));



// Initialize each adjacency list as empty

int i;

for (i = 0; i < numVertices; i++) {


    graph->adjLists[i] = NULL;

}



return graph;
}

// Function to add an edge to an undirected graph

void addEdge(Graph* graph, int src, int dest) {

// Add an edge from source to destination

Node* newNode = createNode(dest);

newNode->next = graph->adjLists[src];


graph->adjLists[src] = newNode;



// Add an edge from destination to source


newNode = createNode(src);

newNode->next = graph->adjLists[dest];

graph->adjLists[dest] = newNode;
}

// DFS traversal function

int DFS(Graph* graph, int vertex, int value, int* visited) {

visited[vertex] = 1;



// Check if the value is found in the current vertex


if (vertex == value) {

    return 1;

}



Node* temp = graph->adjLists[vertex];

while (temp != NULL) {


    int adjacentVertex = temp->dest;

    if (!visited[adjacentVertex]) {

        int found = DFS(graph, adjacentVertex, value, visited);


        if (found) {

            return 1;

        }

    }

    temp = temp->next;

}



return 0;
}

// Function to find a value in the graph using DFS

int findValue(Graph* graph, int value) {

int visited[MAX_VERTICES] = {0};  // Initialize visited array



// Perform DFS traversal starting from each vertex

int v;


for (v = 0; v < graph->numVertices; v++) {

    if (!visited[v]) {

        int found = DFS(graph, v, value, visited);

        if (found) {

            return 1;

        }

    }

}



return 0;
}

// Function to free the dynamically allocated memory for the graph

void freeGraph(Graph* graph) {

if (graph) {


    if (graph->adjLists) {

        int i;


        for (i = 0; i < graph->numVertices; i++) {

            Node* temp = graph->adjLists[i];

            while (temp) {


                Node* prev = temp;

                temp = temp->next;

                free(prev);

            }

        }

        free(graph->adjLists);


    }

    free(graph);

}
}

int main() {

int numVertices = 5;

Graph* graph = createGraph(numVertices);



// Add edges

addEdge(graph, 0, 1);

addEdge(graph, 0, 4);

addEdge(graph, 1, 2);

addEdge(graph, 1, 3);

addEdge(graph, 1, 4);

addEdge(graph, 2, 3);

addEdge(graph, 3, 4);



// Find a value in the graph

int value = 3;

int found = findValue(graph, value);




if (found) {

    printf("Value %d found in the graph.\n", value);


} else {

    printf("Value %d not found in the graph.\n", value);

}



// Free the memory allocated for the graph

freeGraph(graph);



return 0;
}
