Transpose
#include<stdio.h>
void read(int row, int col, int a[row][col])
{
    printf("\nEnter the elements of %d x %d matrix",row, col);
    for (int i=0;i<row;i++)
    {
        for (int j=0;j<col;j++)
        {
            scanf("%d",&a[i][j]);
        }
    }
}

void print(int row, int col, int a[row][col])
{
    printf("Matrix contains .......\n");
    for (int i=0;i<row;i++)
    {
        for (int j=0;j<col;j++)
        {
            printf("%d\t",a[i][j]);
        }
        printf("\n");
    }
}

void transpose(int row, int col, int a[row][col])
{
   printf("Transpose contains .......\n");
    for (int i=0;i<col;i++)
    {
        for (int j=0;j<row;j++)
        {
            printf("%d\t",a[j][i]);
        }
        printf("\n");
    }
}

void writeListToFile(int row,int col,int a[row][col], char* filename) {
    FILE* file = fopen(filename, "w");
    if (file == NULL) {
        printf("Error opening file.\n");
        return;
    }
    fprintf(file, "Transpose contains .......\n");
    for (int i=0;i<col;i++)
    {
        for (int j=0;j<row;j++)
        {
            fprintf(file, "%d\t", a[j][i]);
        }
        fprintf(file,"\n");
    }
    fclose(file);
}


void main()
{
    int row,col;
    printf("Enter the row of the matrix=\n");
    scanf("%d",&row);
    printf("Enter the column of the matrix=\n");
    scanf("%d",&col);
    int a[row][col];
    read(row, col, a);
    print(row,col, a);
    transpose(row,col,a);
    writeListToFile(row,col,a, "transpose.txt");
}

2.Multiplication
#include<stdio.h>
void read(int row, int col, int a[row][col])
{
    printf("\nEnter the elements of %d x %d matrix\n",row, col);
    for (int i=0;i<row;i++)
    {
        for (int j=0;j<col;j++)
        {
            scanf("%d",&a[i][j]);
        }
    }
}

void print(int row, int col, int a[row][col])
{
    printf("Matrix contains .......\n");
    for (int i=0;i<row;i++)
    {
        for (int j=0;j<col;j++)
        {
            printf("%d\t",a[i][j]);
        }
        printf("\n");
    }
}

void mul(int rows1,int rows2,int cols1,int cols2, int mat1[rows1][cols1],int mat2[rows2][cols2])
{
    int rows_mul=rows1;
    int cols_mul=cols2;
    int mul[rows_mul][cols_mul];
    printf("\nMULTIPLIED MATRIX-----\n");
  for(int i=0;i<rows_mul;i++)
    {
        int j=0;
        for(j=0;j<cols_mul;j++)
        {
            mul[i][j]=0;
           for(int k=0;k<cols_mul;k++)
           {
               mul[i][j]+=mat1[i][k]*mat2[k][j];
           }
        }
    }
    print(rows_mul,cols_mul,mul);
    FILE *file= fopen("file4.txt","w");
    if (file == NULL) {
        printf("Error opening file.\n");
        return;
    }
    fprintf(file, "\nThe multiplied matrix is----\n");
     for(int i=0;i<rows_mul;i++)
    {
        for(int j=0;j<cols_mul;j++)
        {
             fprintf(file, "%d\t",mul[i][j]);
        }
       fprintf(file, "\n");
    }
}

void main()
{
    int rows1,cols1,rows2,cols2;
    printf("Enter the row of the matrix 1=\n");
    scanf("%d",&rows1);
    printf("Enter the column of the matrix 1=\n");
    scanf("%d",&cols1);
    int first[rows1][cols1];
    read(rows1, cols1, first);
    print(rows1,cols1, first);
    printf("Enter the row of the matrix 2= \n");
    scanf("%d",&rows2);
    printf("Enter the column of the matrix 2= \n");
    scanf("%d",&cols2);
    int second[rows2][cols2];
    read(rows2, cols2, second);
    print(rows2,cols2, second);
    if(cols1 != rows2)
    {
        printf("\nNumber of columns of matrix 1 and rows of matrix 2 must be equal");
        getch();
        exit(0);
    }
    printf("\nMatrix can be formed\n");
    mul(rows1,rows2,cols1,cols2, first, second);
}


3.Multiplication
#include<stdio.h>
#include<math.h>
void cofactor(float [][25], float);
float determinant(float [][25], float);
void transpose(float [][25], float [][25], float);

int main()
{
  float a[25][25], n, d;
  int i, j;

  printf("Enter the order of the Matrix: ");
  scanf("%f", &n);
  printf("Enter the elements of a matrix: \n");
  for (i = 0;i < n; i++)
    {
     for (j = 0;j < n; j++)
       {
        scanf("%f", &a[i][j]);
        }
    }

  d = determinant(a, n);
  printf("\nd= %f\n",d);
  if (d == 0)
   printf("Since the determinant is zero (0), therefore inverse is not possible.");
  else
    printf("\nInverse is possible\n");
   cofactor(a, n);
}

float determinant(float a[25][25], float k)
{
  float s = 1, det = 0, b[25][25];
  int i, j, m, n, c;
  if (k == 1)
    {
     return (a[0][0]);
    }
  else
    {
     det = 0;
     for (c = 0; c < k; c++)
       {
        m = 0;
        n = 0;
        for (i = 0;i < k; i++)
          {
            for (j = 0 ;j < k; j++)
              {
                b[i][j] = 0;
                if (i != 0 && j != c)
                 {
                   b[m][n] = a[i][j];
                   if (n < (k - 2))
                    n++;
                   else
                    {
                     n = 0;
                     m++;
                     }
                   }
               }
             }
          det = det + s * (a[0][c] * determinant(b, k - 1));
          s = -1 * s;
          }
    }

    return (det);
}


// function for cofactor calculation
void cofactor(float num[25][25], float f)
{
 float b[25][25], fac[25][25];
 int p, q, m, n, i, j;
 for (q = 0;q < f; q++)
 {
   for (p = 0;p < f; p++)
    {
     m = 0;
     n = 0;
     for (i = 0;i < f; i++)
     {
       for (j = 0;j < f; j++)
        {
          if (i != q && j != p)
          {
            b[m][n] = num[i][j];
            if (n < (f - 2))
             n++;
            else
             {
               n = 0;
               m++;
               }
            }
        }
      }
      fac[q][p] = pow(-1, q + p) * determinant(b, f - 1);
    }
  }
  transpose(num, fac, f);
}


///function to find the transpose of a matrix
void transpose(float num[25][25], float fac[25][25], float r)
{
  int i, j;
  float b[25][25], inverse[25][25], d;

  for (i = 0;i < r; i++)
    {
     for (j = 0;j < r; j++)
       {
         b[i][j] = fac[j][i];
        }
    }

  d = determinant(num, r);
  for (i = 0;i < r; i++)
    {
     for (j = 0;j < r; j++)
       {
        inverse[i][j] = b[i][j] / d;
        }
    }
FILE *file= fopen("file5.txt","w");
 if (file == NULL) {
        printf("Error opening file.\n");
        return;
    }
    fprintf(file,"\nThe inverse of the matrix is-----\n");
   printf("\nThe inverse of matrix: \n");
   for (i = 0;i < r; i++)
    {
     for (j = 0;j < r; j++)
       {
         printf("\t%f", inverse[i][j]);
        fprintf(file, "\t%f", inverse[i][j]);
        }
    printf("\n");
    fprintf(file,"\n");
     }
}


