#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

// Structure to represent an adjacency list node
struct AdjListNode {
    int dest;
    int weight;
    struct AdjListNode* next;
};

// Structure to represent an adjacency list
struct AdjList {
    struct AdjListNode* head;
};

// Structure to represent a graph
struct Graph {
    int V;
    struct AdjList* array;
};
struct AdjListNode* newAdjListNode(int dest)
 {
    struct AdjListNode* newNode = (struct AdjListNode*)malloc(sizeof(struct AdjListNode));
    newNode->dest = dest;
    newNode->next = NULL;
    return newNode;
}

// Function to create a graph with V vertices
struct Graph* createGraph(int V) {
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    graph->V = V;

    // Create an array of adjacency lists
    graph->array = (struct AdjList*)malloc(V * sizeof(struct AdjList));

    // Initialize each adjacency list as empty by making head as NULL
    for (int i = 0; i < V; ++i)
        graph->array[i].head = NULL;

    return graph;
}

// Function to add an edge to an undirected graph
void addEdge(struct Graph* graph, int src, int dest) {
    // Add an edge from src to dest
    struct AdjListNode* newNode = newAdjListNode(dest);
    newNode->next = graph->array[src].head;
    graph->array[src].head = newNode;

    // Since the graph is undirected, add an edge from dest to src as well
    newNode = newAdjListNode(src);
    newNode->next = graph->array[dest].head;
    graph->array[dest].head = newNode;
}

// Function to find the index of the vertex with the minimum distance value
int minDistance(int dist[], int visited[], int V)
{
    int min = INT_MAX, min_index;

    for (int v = 0; v < V; ++v) {
        if (visited[v] == 0 && dist[v] <= min) {
            min = dist[v];
            min_index = v;
        }
    }

    return min_index;
}

// Function to print the shortest distance from source to all other vertices and write to a file
void printShortestDistance(int dist[], int V, int src)
{
    printf("Vertex\t\tDistance from Source\n");
    for (int i = 0; i < V; ++i)
{
        printf("%d\t\t%d\n", i, dist[i]);
    }

}

// Function to implement Dijkstra's algorithm to find the shortest distance from source to all other vertices
void dijkstra(struct Graph* graph, int src) {
    int V = graph->V;
    int dist[V];     // Array to store the shortest distance from source to each vertex
    int visited[V];  // Array to track visited vertices

    // Initialize dist[] and visited[]
    for (int i = 0; i < V; ++i) {
        dist[i] = INT_MAX;
        visited[i] = 0;
    }

    // Distance of source vertex from itself is always 0
    dist[src] = 0;

    // Find shortest path for all vertices
    for (int count = 0; count < V - 1; ++count) {
        int u = minDistance(dist, visited, V);
        visited[u] = 1;

        // Update dist[v] if there is an edge from u to v and the total weight of the path from src to v through u is smaller than current value of dist[v]
        struct AdjListNode* node = graph->array[u].head;
        while (node != NULL) {
            int v = node->dest;
            int weight = node->weight;
            if (visited[v] == 0 && dist[u] != INT_MAX && dist[u] + weight < dist[v])
                dist[v] = dist[u] + weight;
            node = node->next;
        }
    }

    // Print the shortest distance from source to all other vertices and write to a file
    printShortestDistance(dist, V, src);
}

int main() {
    int V, src;
    printf("Enter the number of vertices: ");
    scanf("%d", &V);

    struct Graph* graph = createGraph(V);
    printf("Enter the adjacency list (source destination):\n");
    for (int i = 0; i < V; ++i)
    {
        int src, dest;
        scanf("%d %d", &src, &dest);
        addEdge(graph, src, dest);
    }

    printf("Generating random weights for the edges...\n");


    // Generate random weights and add edges to the graph
    for (int i = 0; i < V; ++i) {
        for (int j = i + 1; j < V; ++j) {
            int weight = rand() % 100;
            printf("%d\n"
                   ,weight); // Random weight between 0 and 99
            addEdge(graph, i, j);

        }
    }

    printf("Enter the source vertex: ");
    scanf("%d", &src);

    dijkstra(graph, src);

    return 0;
}

