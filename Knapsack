#include <stdio.h>

#include <stdlib.h>

// Function to find the maximum of two integers

int max(int a, int b) {

return (a > b) ? a : b;
}

// Function to solve the Knapsack problem

int knapsack(int W, int weights[], int values[], int n) {

// Create a 2D array to store the results of subproblems

int dp[n + 1][W + 1];



// Solve the Knapsack problem in a bottom-up manner

for (int i = 0; i <= n; i++) {

    for (int w = 0; w <= W; w++) {

        if (i == 0 || w == 0)

            dp[i][w] = 0; // Base case: no items or no capacity

        else if (weights[i - 1] <= w)

            dp[i][w] = max(values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w]);

        else

            dp[i][w] = dp[i - 1][w];

    }

}



return dp[n][W]; // Return the maximum value that can be obtained
}

int main() {

int n, W;



printf("Enter the number of items: ");

scanf("%d", &n);



int weights[n], values[n];



printf("Enter the weights of the items:\n");

for (int i = 0; i < n; i++) {

    scanf("%d", &weights[i]);

}



printf("Enter the values of the items:\n");

for (int i = 0; i < n; i++) {

    scanf("%d", &values[i]);

}



printf("Enter the maximum capacity of the knapsack: ");

scanf("%d", &W);



int max_value = knapsack(W, weights, values, n);



printf("The maximum value that can be obtained: %d\n", max_value);



return 0;
}

Footer
Â© 2023 GitHub, Inc.
Footer navigation
Terms
